# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dbw_mkz_msgs/SteeringReport.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SteeringReport(genpy.Message):
  _md5sum = "6f32c1fc98edaf75e24a770b2ae3abfc"
  _type = "dbw_mkz_msgs/SteeringReport"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Steering Wheel
float32 steering_wheel_angle      # rad
float32 steering_wheel_angle_cmd  # rad
float32 steering_wheel_torque     # Nm

# Vehicle Speed
float32 speed                     # m/s

# Status
bool enabled  # Enabled
bool override # Driver override
bool timeout  # Command timeout

# Watchdog Counter
bool fault_wdc

# Faults
bool fault_bus1
bool fault_bus2
bool fault_calibration
bool fault_power

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','steering_wheel_angle','steering_wheel_angle_cmd','steering_wheel_torque','speed','enabled','override','timeout','fault_wdc','fault_bus1','fault_bus2','fault_calibration','fault_power']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steering_wheel_angle,steering_wheel_angle_cmd,steering_wheel_torque,speed,enabled,override,timeout,fault_wdc,fault_bus1,fault_bus2,fault_calibration,fault_power

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SteeringReport, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_wheel_angle is None:
        self.steering_wheel_angle = 0.
      if self.steering_wheel_angle_cmd is None:
        self.steering_wheel_angle_cmd = 0.
      if self.steering_wheel_torque is None:
        self.steering_wheel_torque = 0.
      if self.speed is None:
        self.speed = 0.
      if self.enabled is None:
        self.enabled = False
      if self.override is None:
        self.override = False
      if self.timeout is None:
        self.timeout = False
      if self.fault_wdc is None:
        self.fault_wdc = False
      if self.fault_bus1 is None:
        self.fault_bus1 = False
      if self.fault_bus2 is None:
        self.fault_bus2 = False
      if self.fault_calibration is None:
        self.fault_calibration = False
      if self.fault_power is None:
        self.fault_power = False
    else:
      self.header = std_msgs.msg.Header()
      self.steering_wheel_angle = 0.
      self.steering_wheel_angle_cmd = 0.
      self.steering_wheel_torque = 0.
      self.speed = 0.
      self.enabled = False
      self.override = False
      self.timeout = False
      self.fault_wdc = False
      self.fault_bus1 = False
      self.fault_bus2 = False
      self.fault_calibration = False
      self.fault_power = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4f8B().pack(_x.steering_wheel_angle, _x.steering_wheel_angle_cmd, _x.steering_wheel_torque, _x.speed, _x.enabled, _x.override, _x.timeout, _x.fault_wdc, _x.fault_bus1, _x.fault_bus2, _x.fault_calibration, _x.fault_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.steering_wheel_angle, _x.steering_wheel_angle_cmd, _x.steering_wheel_torque, _x.speed, _x.enabled, _x.override, _x.timeout, _x.fault_wdc, _x.fault_bus1, _x.fault_bus2, _x.fault_calibration, _x.fault_power,) = _get_struct_4f8B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.override = bool(self.override)
      self.timeout = bool(self.timeout)
      self.fault_wdc = bool(self.fault_wdc)
      self.fault_bus1 = bool(self.fault_bus1)
      self.fault_bus2 = bool(self.fault_bus2)
      self.fault_calibration = bool(self.fault_calibration)
      self.fault_power = bool(self.fault_power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4f8B().pack(_x.steering_wheel_angle, _x.steering_wheel_angle_cmd, _x.steering_wheel_torque, _x.speed, _x.enabled, _x.override, _x.timeout, _x.fault_wdc, _x.fault_bus1, _x.fault_bus2, _x.fault_calibration, _x.fault_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.steering_wheel_angle, _x.steering_wheel_angle_cmd, _x.steering_wheel_torque, _x.speed, _x.enabled, _x.override, _x.timeout, _x.fault_wdc, _x.fault_bus1, _x.fault_bus2, _x.fault_calibration, _x.fault_power,) = _get_struct_4f8B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.override = bool(self.override)
      self.timeout = bool(self.timeout)
      self.fault_wdc = bool(self.fault_wdc)
      self.fault_bus1 = bool(self.fault_bus1)
      self.fault_bus2 = bool(self.fault_bus2)
      self.fault_calibration = bool(self.fault_calibration)
      self.fault_power = bool(self.fault_power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f8B = None
def _get_struct_4f8B():
    global _struct_4f8B
    if _struct_4f8B is None:
        _struct_4f8B = struct.Struct("<4f8B")
    return _struct_4f8B
