# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dbw_mkz_msgs/GearReport.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dbw_mkz_msgs.msg
import std_msgs.msg

class GearReport(genpy.Message):
  _md5sum = "785b94d5bfee677e7f0da982153f2711"
  _type = "dbw_mkz_msgs/GearReport"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Current gear enumeration
Gear state

# Gear command enumeration
Gear cmd

# Gear reject enumeration
GearReject reject

# Status
bool override

# Faults
bool fault_bus

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dbw_mkz_msgs/Gear
uint8 gear

uint8 NONE=0
uint8 PARK=1
uint8 REVERSE=2
uint8 NEUTRAL=3
uint8 DRIVE=4
uint8 LOW=5

================================================================================
MSG: dbw_mkz_msgs/GearReject
uint8 value

uint8 NONE=0              # Not rejected
uint8 SHIFT_IN_PROGRESS=1 # Shift in progress
uint8 OVERRIDE=2          # Override on brake, throttle, or steering
uint8 ROTARY_LOW=3        # Rotary shifter can't shift to Low
uint8 ROTARY_PARK=4       # Rotary shifter can't shift out of Park
uint8 VEHICLE=5           # Rejected by vehicle (try pressing the brakes)
"""
  __slots__ = ['header','state','cmd','reject','override','fault_bus']
  _slot_types = ['std_msgs/Header','dbw_mkz_msgs/Gear','dbw_mkz_msgs/Gear','dbw_mkz_msgs/GearReject','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,state,cmd,reject,override,fault_bus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GearReport, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = dbw_mkz_msgs.msg.Gear()
      if self.cmd is None:
        self.cmd = dbw_mkz_msgs.msg.Gear()
      if self.reject is None:
        self.reject = dbw_mkz_msgs.msg.GearReject()
      if self.override is None:
        self.override = False
      if self.fault_bus is None:
        self.fault_bus = False
    else:
      self.header = std_msgs.msg.Header()
      self.state = dbw_mkz_msgs.msg.Gear()
      self.cmd = dbw_mkz_msgs.msg.Gear()
      self.reject = dbw_mkz_msgs.msg.GearReject()
      self.override = False
      self.fault_bus = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.state.gear, _x.cmd.gear, _x.reject.value, _x.override, _x.fault_bus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = dbw_mkz_msgs.msg.Gear()
      if self.cmd is None:
        self.cmd = dbw_mkz_msgs.msg.Gear()
      if self.reject is None:
        self.reject = dbw_mkz_msgs.msg.GearReject()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.state.gear, _x.cmd.gear, _x.reject.value, _x.override, _x.fault_bus,) = _get_struct_5B().unpack(str[start:end])
      self.override = bool(self.override)
      self.fault_bus = bool(self.fault_bus)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.state.gear, _x.cmd.gear, _x.reject.value, _x.override, _x.fault_bus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = dbw_mkz_msgs.msg.Gear()
      if self.cmd is None:
        self.cmd = dbw_mkz_msgs.msg.Gear()
      if self.reject is None:
        self.reject = dbw_mkz_msgs.msg.GearReject()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.state.gear, _x.cmd.gear, _x.reject.value, _x.override, _x.fault_bus,) = _get_struct_5B().unpack(str[start:end])
      self.override = bool(self.override)
      self.fault_bus = bool(self.fault_bus)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
